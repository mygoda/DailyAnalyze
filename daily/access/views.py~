#coding=utf-8
from django.contrib import admin
from django.shortcuts import render
from access.models import DailyAccess
from django.http import HttpResponseRedirect, HttpResponse
from django.template import Context,Template
from django.shortcuts import render_to_response 
import linecache
import re
import time,datetime
from django.views.generic import View,TemplateView
#glob模块是最简单的模块之一，内容非常少。用它可以查找符合特定规则的文件路径名
import glob
import os
# Create your views here.


class indexView(TemplateView):

    template_name='index.html'
    #def get(self, request, *args, **kwargs):
     #   return render_to_response(self.template_name)
     
class searchView(View):


    #格式化时间
    def time_formate(self,dic,time,tag=0):
        if dic.has_key('from_time'):
            del dic['from_time']
        if dic.has_key('to_time'):
            del dic['to_time']
        from_date = time.split(' ')[0]
        from_year = int(from_date.split('/')[2])
        from_month = int(from_date.split('/')[0])
        from_day = int(from_date.split('/')[1])
        if tag == 1:
            from_day = from_day + 1
        start = datetime.date(from_year, from_month, from_day)
        return start


    def get(self,request,*args,**kwargs):
        old = time.time()
        dic = {}
	line = 10
        for k,v in request.GET.items():
            if v != '':
                dic[k] = v
	if dic['output'] != '':
	    line = int(dic['output'])
	    del dic['output']
        #执行区间查询的情况
        if (request.GET.get('from_time','') != '') & (request.GET.get('to_time','') != ''):
            from_time = request.GET.get('from_time','')
            start = self.time_formate(dic,from_time)
            to_time = request.GET.get('to_time','')
            end = self.time_formate(dic,to_time)
            result = DailyAccess.objects.filter(accessTime__range=(start,end)).filter(**dic)
            count = result.count()
            if count > 0 :
                t = 'type_select_destails.html'
                count_list = self.other_count(result,2,1,0,200,count)
                user_count = result.values('ip').distinct().count()
                use_time = time.time() - old
		if (line == -1) | (line > count) :
		    line = count - 1 
                context = {"searchlist" : result[:line] , "count" : count ,
                    "use_time" : use_time,
                    "user_count" : user_count,
                    'iphone_count' : count_list[0],
                    'android_count' : count_list[1],
                    'pc_count' : count_list[2],
                    'ok_count' : count_list[3],
                    'first_login' : count_list[4],
                    'latest_login' : count_list[5],
		    'line':line,
                }
                return render_to_response(t,context)
            else:
                return render_to_response('error.html')
        #执行指定日期查询的情况
        elif (request.GET.get('from_time','') != '') & (request.GET.get('to_time','') == ''):
            from_time = request.GET.get('from_time','')
            start = self.time_formate(dic,from_time)
            end = self.time_formate(dic,from_time,1)
            result = DailyAccess.objects.filter(accessTime__range=(start,end)).filter(**dic)
            count = result.count()
            if count > 0 :
                t = 'type_select_destails.html'
                count_list = self.other_count(result,2,1,0,200,count)
                user_count = result.values('ip').distinct().count()
                use_time = time.time() - old
		if (line == -1) | (line > count):
		    line = count - 1
                context = {"searchlist" : result[:line] , "count" : count ,
                    "use_time" : use_time,
                    "user_count" : user_count,
                    'iphone_count' : count_list[0],
                    'android_count' : count_list[1],
                    'pc_count' : count_list[2],
                    'ok_count' : count_list[3],
                    'first_login' : count_list[4],
                    'latest_login' : count_list[5],
		    'line':line,
                }
                return render_to_response(t,context)
            else:

                return render_to_response('error.html')
        #其他没有时间的查询
        else:
            result = DailyAccess.objects.filter(**dic)
    	    count = result.count()
            if count > 0 :
                t = 'type_select_destails.html'
                count_list = self.other_count(result,2,1,0,200,count)
                user_count = result.values('ip').distinct().count()
                use_time = time.time() - old
		if (line == -1) | (line > count):
		    line = count - 1
                context = {"searchlist" : result[:line] , "count" : count ,
                    "use_time" : use_time,
                    "user_count" : user_count,
                    'iphone_count' : count_list[0],
                    'android_count' : count_list[1],
                    'pc_count' : count_list[2],
                    'ok_count' : count_list[3],
                    'first_login' : count_list[4],
                    'latest_login' : count_list[5],
		    'line':line,
                }

                return render_to_response(t,context)
            else:

                return render_to_response('error.html')

    def other_count(self,result,iphone,android,pc,ok,count):
        count_list = []
        iphone_count = result.filter(access_type=iphone).count()
        count_list.append(iphone_count)
        android_count = result.filter(access_type=android).count()
        count_list.append(android_count)
        pc_count = result.filter(access_type=pc).count()
        count_list.append(pc_count)
        ok_count = result.filter(status=200).count()
        count_list.append(ok_count)
        first_login = result[count-1].accessTime
        count_list.append(first_login)
        latest_login = result[0].accessTime
        count_list.append(latest_login)
        return count_list
